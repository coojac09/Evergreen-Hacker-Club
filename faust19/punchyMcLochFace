###Punchy McLochFace
###app.py
from flask import Flask, session, redirect, render_template, request
from flask_session import Session

from jinja2 import Template

from base64 import b64encode

from parser import preprocess_image, export_image, find_edges, export_edges, \
    find_segments, export_segments, extract_cells, export_cells, read_cells

from libs import get_encodings, decode_card, join_commands, check_help, run_help

import os
import os.path

app = Flask(__name__)
SESSION_TYPE = 'filesystem'
SESSION_FILE_DIR = os.path.join(os.path.dirname(__file__), 'data')
app.config.from_object(__name__)
Session(app)

global counter
counter = 0

@app.route('/')
def main():
    global counter
    counter += 1
    return redirect('/static/site.htm', code=302)


@app.route('/counter.htm')
def get_count():
    global counter
    counter += 1
    return render_template('counter.htm', n=counter)


@app.route('/upload.htm')
def show_upload():
    global counter
    counter += 1
    return render_template('upload.htm', encoding=get_encodings())


@app.route('/list-data.htm')
def list_data():
    global counter
    counter += 1

    try:
        data = session['data']
    except KeyError:
        data = []


    help_description = None
    help_map = []
    for id, i in enumerate(data):
        h = check_help(i)
        if h is not None:
            help_description, help_html = h.split('---')
            help_map.append(Template(help_html).render(id=id))
        else:
            help_map.append(None)

    return render_template('list-data.htm', data=list(zip(data, help_map)), help=help_description)


def upload_parse():
    try:
        img = request.files['image']
        bwthreshold = int(request.form['bwthreshold'])
        invert = 'invert' in request.form
        return preprocess_image(img, bwthreshold, invert)
    except KeyError:
        raise RuntimeError('Your request does not conform: {},  {}'.format(request.form, request.files))
    except RuntimeError as err:
        raise RuntimeError('Could not preprocess request: {}'.format(err))


@app.route('/preview-segments.htm', methods=['POST'])
def preview_segemnts():
    global counter
    counter += 1

    try:
        img = upload_parse()
        img = export_segments(img, *find_segments(*find_edges(img)))
    except RuntimeError as err:
        return 'Could not export segments: {}'.format(err)

    return render_template('preview.htm', preview=b64encode(img).decode('utf-8'))


@app.route('/preview-edges.htm', methods=['POST'])
def preview_edges():
    global counter
    counter += 1

    try:
        img = upload_parse()
        img = export_edges(img, *find_edges(img))
    except RuntimeError as err:
        return 'Could not export edges: {}'.format(err)

    return render_template('preview.htm', preview=b64encode(img).decode('utf-8'))


@app.route('/preview-cells.htm', methods=['POST'])
def preview_cells():
    global counter
    counter += 1

    try:
        img = upload_parse()
        img = export_cells(extract_cells(img, *find_segments(*find_edges(img))))
    except RuntimeError as err:
        return 'Could extract cells: {}'.format(err)

    return render_template('preview.htm', preview=b64encode(img).decode('utf-8'))


@app.route('/preview-image.htm', methods=['POST'])
def preview_image():
    global counter
    counter += 1

    try:
      img = export_image(upload_parse())
    except RuntimeError as err:
        return 'Could not preview image: {}'.format(err)

    return render_template('preview.htm', preview=b64encode(img).decode('utf-8'))


@app.route('/upload-image.htm', methods=['POST'])
def upload_image():
    global counter
    counter += 1

    try:
        img = upload_parse()
        data = read_cells(extract_cells(img, *find_segments(*find_edges(img))))
    except Exception as err:
        return 'Could not parse card: {}'.format(err)

    try:
        encoding = request.form['encoding'].encode('ASCII')
    except KeyError:
        return 'Your request is missing the encoding field'

    d = decode_card(encoding, data)
    if d is None:
        d = b'Encoding Error'

    try:
        sess_data = session['data']
    except KeyError:
        sess_data = []

    sess_data.append(d)
    session['data'] = sess_data

    return redirect('/list-data.htm', code=302)


@app.route('/list-data.htm', methods=['POST'])
def join_data():
    global counter
    counter += 1

    try:
        sess_data = session['data']
    except KeyError:
        sess_data = []

    res = []
    for i, d in enumerate(sess_data, 1):
        if str(i) in request.form:
            res.append(d)

    cmd = join_commands(res)

    for r in res:
        sess_data.remove(r)
    session['data'] = [cmd.encode('ascii')] + sess_data

    return redirect('/list-data.htm', code=302)

@app.route('/run-help.htm', methods=['POST'])
def run_help_lib():
    try:
        sess_data = session['data']
    except KeyError:
        sess_data = []

    if sess_data is None:
        sess_data = []

    id = int(request.form['id'])

    if int(id) < len(sess_data):
        ret = run_help(sess_data[id])
        return ret
    else:
        raise RuntimeError('id {} not found'.format(id))
###libs.py
from ctypes import CDLL, POINTER, c_char_p, c_void_p, c_int, pointer, create_string_buffer, cast, c_char

lib_decode = CDLL('extensions/decode/decode.so')

list_encodings = lib_decode.ListEncodingsExport
list_encodings.restype = POINTER(c_char_p)

free_encodings = lib_decode.FreeEncodings
check_encoding = lib_decode.CheckEncodingExport

decode = lib_decode.DecodeExport
decode.argtypes = [c_char_p, (c_int*80)]
decode.restype = c_char_p

check_encoding()

lib_join = CDLL('extensions/join/join.so')

join_cmds = lib_join.join_commands
join_cmds.argtypes = [POINTER(c_char_p), c_int]
join_cmds.restype = c_void_p

free_memory = lib_join.free_memory
free_memory.argtypes = [c_void_p]


def get_encodings():
    l = list_encodings()
    i = 0
    res = list()
    while l[i]:
        res.append(l[i].decode('ascii'))
        i += 1
    free_encodings(l)
    return res

def decode_card(encoding, card):
    x = (c_int*80)(*card)
    d = decode(create_string_buffer(encoding), x)
    return d


def join_commands(lines):
    cmds = (c_char_p * len(lines))()
    cmds[:] = lines

    r = join_cmds(cmds, len(lines))
    cmd = (cast(r, c_char_p).value).decode('ascii')
    free_memory(r)
    return cmd

lib_staply = CDLL('extensions/staply/libstaply.so')

init_func = lib_staply.init_staply
init_func()

check_help_func = lib_staply.check_for_possible_help
check_help_func.argtypes = [c_char_p]
check_help_func.restype  = c_char_p

run_help_func = lib_staply.run_help
run_help_func.argtypes = [c_char_p]
run_help_func.restype  = POINTER(c_char)

def check_help(data):
    ret = check_help_func(data)
    if ret is None:
        return None
    else:
        return ret.decode('ascii')

def run_help(data):
    help = run_help_func(data)
    ret = (cast(help, c_char_p).value).decode('latin1')
    return ret
###parser.py
import cv2
import matplotlib.pyplot as plt
import numpy as np

from io import BytesIO

import matplotlib
matplotlib.use('Agg')

def preprocess_image(data, thres, inv):
    img  = cv2.imdecode(np.asarray(bytearray(data.read()), dtype=np.uint8), -1)
    grey = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    blur = cv2.blur(grey, (7,7))
    bw   = cv2.threshold(blur, thres, 255, cv2.THRESH_BINARY)[1]
    if inv:
        bw = 255 - bw
    return bw


def export_image(imgbuffer):
    return cv2.imencode('.png', imgbuffer)[1].tobytes()


def find_edges(bw):
    edges = cv2.Canny(bw, 100, 200)
    lines = cv2.HoughLines(edges, 1, np.pi/180, 200)

    lines_vert = []
    lines_horiz = []
    for line in lines:
        theta = line[0][1]
        if abs(theta - 1.5708) < 0.001:
            lines_horiz.append(line[0][0])
        elif abs(theta) < 0.001:
            lines_vert.append(line[0][0])

    if len(lines_vert) > 200 or len(lines_horiz) > 200:
        raise RuntimeError("Too many lines detected")
    if len(lines_vert) < 2 or len(lines_horiz) < 2:
        raise RuntimeError("Not enough lines detected")

    lines_vert.sort()
    lines_horiz.sort()

    def collate_lines(lines, dir):
        while True:
            lines_new = list()
            change = False
            i = 0
            while i < len(lines) - 1:
                if ((lines[i+1] - lines[i]) / bw.shape[dir]) < .001:
                    new_line = (lines[i] + lines[i+1]) / 2.0
                    lines_new.append(new_line)
                    i += 2
                    change = True
                else:
                    lines_new.append(lines[i])
                    i += 1
            if not change:
                break
            else:
              lines = lines_new
        return lines

    lines_vert  = collate_lines(lines_vert , 0)
    lines_horiz = collate_lines(lines_horiz, 1)

    if len(lines_vert) < 2 or len(lines_horiz) < 2:
        raise RuntimeError("Too few or too many edges detected")
    else:
        lines_vert = [lines_vert[0], lines_vert[-1]]
        lines_horiz = [lines_horiz[0], lines_horiz[-1]]
        return lines_vert, lines_horiz

def export_edges(bw, lines_vert, lines_horiz):
    ax = plt.imshow(bw)
    box = ax.axes
    box.vlines(lines_vert,  0, bw.shape[0])
    box.hlines(lines_horiz, 0, bw.shape[1])

    buf = BytesIO()
    plt.savefig(buf, format='png')
    return buf.getbuffer()


def find_segments(lines_vert, lines_horiz):
    height = lines_horiz[1] - lines_horiz[0]
    width  = lines_vert [1] - lines_vert [0]

    margin_top    = (3 / 16) / (3 + 1 / 4)
    margin_bottom = margin_top

    margin_left   = 0.2235 / (7 + 3 / 8)
    margin_right  = margin_left

    borders_horiz = np.linspace(lines_horiz[0] + margin_top  * height, lines_horiz[1] - margin_bottom * height, num=13)
    borders_vert  = np.linspace(lines_vert [0] + margin_left * width,  lines_vert [1] - margin_right  * width,  num=81)

    return borders_vert, borders_horiz


def export_segments(bw, borders_vert, borders_horiz):
    plt.figure()
    ax = plt.imshow(bw)
    box = ax.axes
    box.hlines(borders_horiz, 0, bw.shape[1])
    box.vlines(borders_vert,  0, bw.shape[0])

    buf = BytesIO()
    plt.savefig(buf, format='png')
    return buf.getbuffer()


def extract_cells(bw, borders_vert, borders_horiz):
    cells = np.zeros((12, 80))
    for x in range(80):
        for y in range(12):
            cells[y, x] = bw[int(borders_horiz[y]):int(borders_horiz[y+1]),
                             int(borders_vert [x]):int(borders_vert [x+1])].mean() > 0

    return cells


def export_cells(cells):
    plt.figure()
    plt.imshow(cells)

    buf = BytesIO()
    plt.savefig(buf, format='png')
    return buf.getbuffer()


def read_cells(cells):
    values = []
    # for i in cells.transpose():
    #     value = i[0] * 2**12 + i[1] * 2**11
    #     for x in range(3, 12):
    #         value += i[x] * 2**(x-2)
    #     values.append(int(value))
    for i in cells.transpose():
        value = 0
        for x in range(0, 12):
            value += i[x] * (2**x)
        values.append(int(value))

    return values
