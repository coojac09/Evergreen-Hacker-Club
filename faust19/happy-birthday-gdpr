###happy-birthday-gdpr

###database.go

package main

import (
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	_ "github.com/jinzhu/gorm/dialects/sqlite"
)

type User struct {
	gorm.Model
	Username     string `gorm:"unique;size:64"`
	PasswordHash []byte `gorm:"size:64"`
}

type File struct {
	gorm.Model
	UserId   uint
	User     User
	Name     string
	MimeType string `gorm:"size:64"`
	Data     []byte
}

var db *gorm.DB

func initDatabase() {
	var err error
	db, err = gorm.Open(flagDatabaseType, flagDatabaseConnect)
	if err != nil {
		panic(err)
	}

	db.AutoMigrate(&User{})
	db.AutoMigrate(&File{})
}


### http.go

package main

import (
	"github.com/jinzhu/gorm"
	"io/ioutil"
	"strconv"
	"strings"
)
import "fmt"
import "net/http"

const maxUploadSize = 256 * 1024 // 256 KiB

func initHttp() {
	http.HandleFunc("/", httpRoot)
	http.HandleFunc("/register", httpRegister)
	http.HandleFunc("/login", httpLogin)
	http.HandleFunc("/logout", httpLogout)
	http.HandleFunc("/account", httpAccount)
	http.HandleFunc("/upload", httpUpload)
	http.HandleFunc("/download", httpDownload)
	http.HandleFunc("/static/", httpStatic)
}

func httpRoot(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path == "/" {
		username := ""
		if session := RequestSession(r); session != nil {
			username = session.Username()
		}
		w.Header().Set("Content-Type", "text/html")
		check(renderTemplate(w, "index.html", struct{ UserName string }{username}))
	} else if r.URL.Path == "/index.html" {
		http.Redirect(w, r, "/", http.StatusSeeOther)
	} else {
		http.NotFound(w, r)
	}
}

func httpRegister(w http.ResponseWriter, r *http.Request) {
	if RequestSession(r) != nil {
		http.Redirect(w, r, "/account", http.StatusTemporaryRedirect)
	}

	errorMessage := ""
	if r.Method == "POST" {
		err := registerUser(r.FormValue("username"), r.FormValue("password"))
		if err != nil {
			errorMessage = err.Error()
		} else {
			http.Redirect(w, r, "/login", http.StatusTemporaryRedirect)
			return
		}
	}
	w.Header().Set("Content-Type", "text/html")
	check(renderTemplate(w, "register.html", struct {
		UserName     string
		ErrorMessage string
	}{"", errorMessage}))
}

func httpLogin(w http.ResponseWriter, r *http.Request) {
	if RequestSession(r) != nil {
		http.Redirect(w, r, "/account", http.StatusTemporaryRedirect)
	}

	if r.Method == "GET" {
		w.Header().Set("Content-Type", "text/html")
		check(renderTemplate(w, "login.html", struct{ UserName string }{""}))
	} else if r.Method == "POST" {
		username := r.FormValue("username")
		password := r.FormValue("password")
		username = string(makeUpper([]byte(username)))
		var user User
		if result := db.Where(&User{Username: username}).First(&user); result.Error != nil {
			http.Redirect(w, r, "/login", http.StatusSeeOther)
			return
		}
		session := NewSession()
		copy(session.UsernameBytes(), username)
		copy(session.PasswordBytes(), password)
		session.SetUid(uint64(user.ID))
		http.SetCookie(w, session.ToCookie())
		http.Redirect(w, r, "/account", http.StatusSeeOther)
	}
}

func httpLogout(w http.ResponseWriter, r *http.Request) {
	http.SetCookie(w, &http.Cookie{Name: "session"})
	http.Redirect(w, r, "/", http.StatusSeeOther)
}

func httpAccount(w http.ResponseWriter, r *http.Request) {
	session := RequestSession(r)
	if session == nil {
		http.Redirect(w, r, "/login", http.StatusSeeOther)
		return
	}

	var files []File
	db.Where(&File{UserId: uint(session.Uid())}).Find(&files)

	userRecord := User{Model: gorm.Model{ID: uint(session.Uid())}}
	db.Where(&userRecord).Find(&userRecord)

	w.Header().Set("Content-Type", "text/html")
	check(renderTemplate(w, "account.html", struct {
		UserName   string
		UserRecord User
		Files      []File
	}{session.Username(), userRecord, files}))
}

func httpUpload(w http.ResponseWriter, r *http.Request) {
	session := RequestSession(r)
	if session == nil {
		http.Redirect(w, r, "/login", http.StatusSeeOther)
		return
	}

	errorMessage := ""
	successMessage := ""
	if r.Method == "POST" {
		r.Body = http.MaxBytesReader(w, r.Body, maxUploadSize)
		if err := r.ParseMultipartForm(maxUploadSize); err != nil {
			if err.Error() == "http: request body too large" {
				errorMessage = fmt.Sprintf("Uploaded file is too large.")
				goto out
			} else {
				panic(err)
			}
		}

		username := r.FormValue("user")
		var user User
		if userid, err := strconv.ParseUint(username, 10, 0); err == nil {
			user.ID = uint(userid)
		} else {
			user.Username = string(makeUpper([]byte(username)))
		}
		if result := db.Where(&user).First(&user); result.Error != nil {
			errorMessage = fmt.Sprintf("unknown user %q\n", username)
			goto out
		}

		file, header, err := r.FormFile("data")
		if err != nil {
			errorMessage = "cannot read uploaded file"
			goto out
		}
		data, err := ioutil.ReadAll(file)
		if err != nil {
			errorMessage = "cannot read uploaded file"
			goto out
		}

		fileRecord := File{
			UserId:   user.ID,
			Name:     header.Filename,
			MimeType: header.Header.Get("Content-Type"),
			Data:     data,
		}
		if result := db.Create(&fileRecord); result.Error != nil {
			errorMessage = "Failed to save upload."
			goto out
		}

		successMessage = "File uploaded successfully."
		goto out
	}
out:
	w.Header().Set("Content-Type", "text/html")
	check(renderTemplate(w, "upload.html", struct {
		UserName       string
		ErrorMessage   string
		SuccessMessage string
	}{session.Username(), errorMessage, successMessage}))
}

func httpDownload(w http.ResponseWriter, r *http.Request) {
	session := RequestSession(r)
	if session == nil {
		http.Redirect(w, r, "/login", http.StatusSeeOther)
		return
	}

	fileId, err := strconv.Atoi(r.URL.RawQuery)
	if err != nil {
		fileId = -1
	}

	var file File
	if result := db.Where(&File{Model: gorm.Model{ID: uint(fileId)}, UserId: uint(session.Uid())}).First(&file); result.Error != nil {
		w.WriteHeader(http.StatusNotFound)
		fmt.Fprintln(w, "file not found")
		return
	}

	if file.MimeType == "" {
		file.MimeType = "application/octet-stream"
	}
	w.Header().Set("Content-Disposition", fmt.Sprintf("attachment; filename=%s", file.Name))
	w.Header().Set("Content-Type", file.MimeType)
	w.Write(file.Data)
}

func httpStatic(w http.ResponseWriter, r *http.Request) {
	name := r.URL.Path[1:]
	data, ok := bindata[name]
	if !ok {
		w.WriteHeader(http.StatusNotFound)
		fmt.Fprintln(w, "file not found")
		return
	}
	mimeType := "application/octet-stream"
	if strings.HasSuffix(name, ".css") {
		mimeType = "text/css"
	}
	w.Header().Set("Content-Type", mimeType)
	w.Write([]byte(data))
}


###main.go
package main

import (
        "flag"
        "net/http"
)

var flagStorage string
var flagDatabaseType string
var flagDatabaseConnect string

func main() {
        flag.StringVar(&flagListen, "listen", ":4377", "'address:port' to listenn
 on")
        flag.StringVar(&flagStorage, "storage", "./data", "persistent storage dii
rectory")
        flag.StringVar(&flagDatabaseType, "database-type", "", "database type (ss
qlite3 or postgres)")
        flag.StringVar(&flagDatabaseConnect, "database-connect", "", "database tt
o connect to, see http://gorm.io/docs/connecting_to_the_database.html")
        flag.Parse()

        initDatabase()
        initHttp()

        err := http.ListenAndServe(flagListen, nil)
        if err != nil {
                panic(err)
        }
}

###session.go

package main

import (
        "crypto/aes"
        "crypto/rand"
        "crypto/sha512"
        "crypto/subtle"
        "fmt"
        "math"
        "os"
        "strconv"
)
import "crypto/cipher"
import "encoding/base64"
import "net/http"

const (
        usernameIdx = 0
        usernameLen = 64
        passwordIdx = usernameIdx + usernameLen
        passwordLen = 64
        uidIdx      = passwordIdx + passwordLen
        uidLen      = 16
)

type Session [sessionLen]byte

func NewSession() *Session {
        return &Session{}
}

func (s *Session) UsernameBytes() []byte {
        return s[usernameIdx : usernameIdx+usernameLen]
}

func (s *Session) Username() string {
        return string(trim(s.UsernameBytes()))
}

func (s *Session) PasswordBytes() []byte {
        return s[passwordIdx : passwordIdx+passwordLen]
}

func (s *Session) Password() string {
        return string(trim(s.PasswordBytes()))
}


func (s *Session) PasswordBytesToHash() []byte {
        assert(usernameIdx+usernameLen == passwordIdx, "invalid session format")
        return s[usernameIdx : passwordIdx+passwordLen]
}

func (s *Session) Uid() uint64 {
        uid, _ := strconv.ParseUint(string(s[uidIdx:uidIdx+uidLen]), 16, 64)
        if uid == 0 {
                return math.MaxUint64
        }
        return uid
}

func (s *Session) SetUid(uid uint64) {
        copy(s[uidIdx:uidIdx+uidLen], []byte(fmt.Sprintf("%016X", uid)))
}

func (s *Session) ToCookie() *http.Cookie {
        block, err := aes.NewCipher(sessionKey[:32])
        if err != nil {
                panic(err)
        }
        mode := cipher.NewCBCEncrypter(block, sessionKey[32:])
		cipher := make([]byte, sessionLen)
        mode.CryptBlocks(cipher, s[:])
        return &http.Cookie{
                Name:  "session",
                Value: base64.StdEncoding.EncodeToString(cipher),
        }
}

func (s *Session) Validate() bool {
        var user User
        if err := db.First(&user, s.Uid()).Error; err != nil {
                fmt.Println("Error: User not found", err, s.Uid())
                return false
        }

        makeUpper(s.UsernameBytes())
        makeUpper(s.PasswordBytes())
        candidatePasswordHash := sha512.Sum512(s.PasswordBytesToHash())

        return subtle.ConstantTimeCompare(user.PasswordHash, candidatePasswordHaa
sh[:]) == 1
}

func RequestSession(r *http.Request) *Session {
        cookie, err := r.Cookie("session")
        if err != nil {
                return nil
        }
        session := NewSession()
        n, err := base64.StdEncoding.Decode(session[:], []byte(cookie.Value))
        if err != nil || n != len(session) {
                return nil
        }
        block, err := aes.NewCipher(sessionKey[:32])
        if err != nil {
                panic(err)
        }
        mode := cipher.NewCBCDecrypter(block, sessionKey[32:])
        mode.CryptBlocks(session[:], session[:])
        if !session.Validate() {
                return nil
        }
        return session
}

var sessionKey = generateSessionKey()

func generateSessionKey() []byte {
        key := make([]byte, 32+16)
        if os.Getenv("HAPPY_BIRTHDAY_GDPR_SESSION") == "insecure" {
                fmt.Println("warning: using insecure session key")
        } else {
                _, err := rand.Read(key)
                check(err)
        }
        return key
}

###templates.go
package main

import (
	"bytes"
	"html/template"
	"io"
)

var templates *template.Template

func renderTemplate(wr io.Writer, name string, data interface{}) error {
	const prefix = "templates/"
	tmpl := template.New(name)
	tmpl.Funcs(template.FuncMap{
		"mod": func(i, j int) int {
			return i % j
		},
	})
	tmpl, err := tmpl.Parse(bindata[prefix+name])
	check(err)
	for {
		extendsTmpl, err := tmpl.Lookup("extends").Clone()
		check(err)
		if extendsTmpl == nil {
			break
		}
		extendsBuf := bytes.NewBuffer(nil)
		err = extendsTmpl.Execute(extendsBuf, nil)
		check(err)
		extends := extendsBuf.String()
		if tmpl.Lookup(extends) != nil {
			break
		}
		tmpl, err = tmpl.New(extends).Parse(bindata[prefix+extends])
		check(err)
	}
	return tmpl.Execute(wr, data)
}

###users.go
package main

import (
	"crypto/sha512"
	"fmt"
)

func registerUser(username string, password string) error {
	if len(username) > usernameLen {
		return fmt.Errorf("username must not be longer than %d characters", usernameLen)
	} else if isDigits(username) {
		return fmt.Errorf("username must contain at least one letter")
	} else if len(password) < 8 {
		return fmt.Errorf("sorry, but %q is not a secure password", password)
	} else if len(password) > passwordLen {
		return fmt.Errorf("password must not be longer than %d charachters", passwordLen)
	}

	tempSession := NewSession()
	copy(tempSession.UsernameBytes(), username)
	copy(tempSession.PasswordBytes(), password)
	makeUpper(tempSession.UsernameBytes())
	makeUpper(tempSession.PasswordBytes())
	passwordHash := sha512.Sum512(tempSession.PasswordBytesToHash())

	user := User{
		Username:     string(tempSession.UsernameBytes()[:len(username)]),
		PasswordHash: passwordHash[:],
	}
	if result := db.Create(&user); result.Error != nil {
		return fmt.Errorf("username %q is already taken", username)
	}
	return nil
}

###utils.go
package main

import "bytes"
import "unicode"

func assert(cond bool, msg interface{}) {
	if !cond {
		panic(msg)
	}
}

func check(err error) {
	assert(err == nil, err)
}

func isDigits(s string) bool {
	for _, c := range s {
		if !unicode.IsDigit(c) {
			return false
		}
	}
	return true
}

func makeUpper(data []byte) []byte {
	return append(data[:0], bytes.Map(unicode.ToUpper, data)...)
}

func trim(bs []byte) []byte {
	for i, b := range bs {
		if b == 0 {
			return bs[:i]
		}
	}
	return bs
}






