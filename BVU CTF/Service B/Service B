#Service_B


#config.py#############################################################

import os
basedir = os.path.abspath(os.path.dirname(__file__))

class Config(object):
    DEBUG = False
    TESTING = False
    CSRF_ENABLED = True
    SECRET_KEY = 'completelyDiFERrent'
    SQLALCHEMY_DATABASE_URI = 'postgresql://postgres:scouponadmin@localhost/scoupon'


class ProductionConfig(Config):
    DEBUG = False


class DevelopmentConfig(Config):
    DEVELOPMENT = True
    DEBUG = True


class TestingConfig(Config):
    TESTING = True





#requirements.txt##############################################3

alembic==1.0.10
certifi==2019.3.9
chardet==3.0.4
Click==7.0
Flask==1.0.2
Flask-Migrate==2.4.0
Flask-Script==2.0.6
Flask-SQLAlchemy==2.4.0
idna==2.8
itsdangerous==1.1.0
Jinja2==2.10.1
Mako==1.0.9
MarkupSafe==1.1.1
psycopg2-binary==2.8.2
python-dateutil==2.8.0
python-editor==1.0.4
requests==2.21.0
six==1.12.0
SQLAlchemy==1.3.3
urllib3==1.24.3
Werkzeug==0.15.2




#app.py#############################################################

# Run with:
# FLASK_ENV=development flask run --host=0.0.0.0

from flask import abort, Flask, json, redirect, render_template, request, Response, url_for, session, jsonify
from flask_sqlalchemy import SQLAlchemy
import requests

app = Flask(__name__)
app.config.from_object('config.DevelopmentConfig')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.secret_key = app.config['SECRET_KEY']
db = SQLAlchemy(app)

from models import Coupon

@app.route('/api/query/', methods=['GET'])
def api_query():
    q = Coupon.query
    for attr, value, in request.args.items():
        if value != "":
            q = q.filter(getattr(Coupon, attr) == "%s" % value)
    results = list(map(lambda result: result.serialize(), q.all()))
    return jsonify(results)

@app.route('/api/vendors/', methods=['GET'])
def api_vendors():
    results = Coupon.query.all()
    vendors = list(set(map(lambda result: result.vendor, results)))
    vendors.sort()
    return jsonify(vendors)

@app.route('/')
def index():
    if 'message' in session:
        message = session['message']
        del session['message']
        return render_template('index.html', message=message)

    return render_template('index.html')

@app.route('/reveal/', methods=['POST'])
def reveal():
    if 'code' not in request.form or request.form['code'].strip() == '':
        session['message'] = 'Please specify a code.'
        return redirect(url_for('index'))

    resp = requests.get('http://localhost:5000/api/query/',
            params={
                'code': request.form['code']
            })
    jresults = json.loads(resp.text)

    if jresults == []:
        session['message'] = 'No coupon found for the code {}.'\
                                .format(request.form['code'])
        return redirect(url_for('index'))
    else:
        d = jresults[0]
        return render_template('reveal.html', vendor=d['vendor'], discount=d['discount'])

if __name__ == '__main__':
    app.run()






#manage.py########################################################

from flask_script import Manager
from flask_migrate import Migrate, MigrateCommand
import os

from app import app, db

app.config.from_object('config.DevelopmentConfig')

migrate = Migrate(app, db)
manager = Manager(app)

manager.add_command('db', MigrateCommand)

if __name__ == '__main__':
    manager.run()





#models.py####################################################

from app import db

class Coupon(db.Model):
    __tablename__ = 'coupons'

    id = db.Column(db.Integer, primary_key=True)
    code = db.Column(db.String())
    vendor = db.Column(db.String())
    discount = db.Column(db.String())

    def serialize(self):
        return {
            'id': self.id,
            'code': self.code,
            'vendor': self.vendor,
            'discount': self.discount,
        }

    def __repr__(self):
return 'Coupon:'+str(self.serialize())
